// Generated by CoffeeScript 1.3.3
(function() {
  var AjaxHandler,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  AjaxHandler = (function() {

    function AjaxHandler() {
      this.complete = __bind(this.complete, this);

      this.beforeSend = __bind(this.beforeSend, this);
      this.labels = ['waitMessage'];
      this.requestsSent = 0;
      this.requestsCompleted = 0;
      l10.init(this);
      this.is_smartphone = false;
      if ($("html").hasClass("touch") && $(window).width() < 480) {
        this.is_smartphone = true;
        self.scrollTo(0, 0);
      }
      $.ajaxPrefilter(function(options, originalOptions, jqXHR) {
        if (options.container != null) {
          jqXHR.container = options.container;
        }
        if (options.handleErrors != null) {
          jqXHR.handleErrors = options.handleErrors;
        } else {
          jqXHR.handleErrors = true;
        }
        if (options.errorFieldMap != null) {
          jqXHR.errorFieldMap = options.errorFieldMap;
        }
        if (options.loadingMessage != null) {
          jqXHR.loadingMessage = options.loadingMessage;
        }
        if (options.errorAppendType != null) {
          jqXHR.errorAppendType = options.errorAppendType;
        }
        return void 0;
      });
      $.ajaxSetup({
        beforeSend: this.beforeSend,
        complete: this.complete,
        error: function(jqXHR, textStatus, errorThrown) {
          var data, error, errorlist, key, _i, _len, _ref, _ref1;
          if (jqXHR.handleErrors) {
            if (jqXHR.status === 403) {
              if (typeof currentLocation !== "undefined" && currentLocation !== null) {
                currentLocation.redirectToLandingPage();
              }
            }
            if (jqXHR.container != null) {
              data = [];
              try {
                data = JSON.parse(jqXHR.responseText);
              } catch (ex) {
                data = {
                  errors: [l('Generic.error')]
                };
              }
              errorlist = '';
              _ref = data.errors;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                error = _ref[_i];
                key = error.split('.')[1];
                if (key.indexOf('Required') === -1) {
                  errorlist += '<li>' + l(error) + '</li>';
                }
                if (((_ref1 = jqXHR.errorFieldMap) != null ? _ref1[key] : void 0) != null) {
                  $(jqXHR.errorFieldMap[key]).addClass('errorField').closest('p').addClass('errorField');
                }
              }
              return jqXHR.container.notify({
                message: '<ul>' + errorlist + '</ul>',
                sticky: true,
                type: 'error',
                appendType: jqXHR.errorAppendType != null ? jqXHR.errorAppendType : 'before'
              });
            }
          }
        }
      });
    }

    AjaxHandler.prototype.beforeSend = function(jqXHR, settings) {
      this.requestsSent++;
      if (jqXHR.container != null) {
        jqXHR.container.css({
          cursor: 'wait'
        });
        if (jqXHR.loadingMessage != null) {
          return jqXHR.container.loading({
            message: jqXHR.loadingMessage
          });
        } else {
          return jqXHR.container.loading();
        }
      } else {
        return $(document.body).css({
          cursor: 'wait'
        });
      }
    };

    AjaxHandler.prototype.complete = function(jqXHR, status) {
      this.requestsCompleted++;
      if (jqXHR.container != null) {
        jqXHR.container.css({
          cursor: ''
        });
        return jqXHR.container.loading('close');
      } else {
        return $(document.body).css({
          cursor: ''
        });
      }
    };

    return AjaxHandler;

  })();

  $(function() {
    var ajaxHandler;
    $.urlPrefix = '/' + location.pathname.split('/')[1];
    if ($.urlPrefix === '/' || $.urlPrefix === '/auth' || location.pathname.indexOf('/', 1) === -1) {
      $.urlPrefix = '';
    }
    ajaxHandler = new AjaxHandler;
    return window.ajaxHandler = ajaxHandler;
  });

}).call(this);
